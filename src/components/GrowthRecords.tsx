import React, { useState } from 'react';
import { Plus, Star, Heart, Trophy, Camera, Trash2, Edit3, MoreVertical } from 'lucide-react';
import { useRecord } from '../context/RecordContext';

const GrowthRecords: React.FC = () => {
    const { childInfo } = useRecord();
    const [growthRecords, setGrowthRecords] = useState<{
        id: string;
        date: Date;
        title: string;
        description: string;
        category: 'first_time' | 'milestone' | 'achievement' | 'memory';
        createdAt: Date;
    }[]>([]);

    const [showAddModal, setShowAddModal] = useState(false);
    const [showEditModal, setShowEditModal] = useState(false);
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [showActionMenu, setShowActionMenu] = useState<string | null>(null);
    const [recordToDelete, setRecordToDelete] = useState<string | null>(null);
    const [recordToEdit, setRecordToEdit] = useState<string | null>(null);
    const [newRecord, setNewRecord] = useState({
        title: '',
        description: '',
        category: 'first_time' as 'first_time' | 'milestone' | 'achievement' | 'memory'
    });

    const categoryOptions = [
        { id: 'first_time', label: '„ÅØ„Åò„ÇÅ„Å¶„Åß„Åç„Åü„Åì„Å®', icon: <Star className="w-5 h-5" />, color: 'text-amber-600', bgColor: 'bg-amber-50', borderColor: 'border-amber-200' },
        { id: 'milestone', label: 'ÊàêÈï∑„ÅÆÁØÄÁõÆ', icon: <Trophy className="w-5 h-5" />, color: 'text-emerald-600', bgColor: 'bg-emerald-50', borderColor: 'border-emerald-200' },
        { id: 'achievement', label: 'È†ëÂºµ„Å£„Åü„Åì„Å®', icon: <Heart className="w-5 h-5" />, color: 'text-rose-600', bgColor: 'bg-rose-50', borderColor: 'border-rose-200' },
        { id: 'memory', label: 'ÊÄù„ÅÑÂá∫', icon: <Camera className="w-5 h-5" />, color: 'text-blue-600', bgColor: 'bg-blue-50', borderColor: 'border-blue-200' }
    ];

    const handleAddRecord = () => {
        if (!newRecord.title.trim()) return;

        const record = {
            id: Date.now().toString(),
            date: new Date(),
            title: newRecord.title.trim(),
            description: newRecord.description.trim(),
            category: newRecord.category,
            createdAt: new Date()
        };

        setGrowthRecords(prev => [record, ...prev]);
        setNewRecord({ title: '', description: '', category: 'first_time' });
        setShowAddModal(false);
    };

    const handleEditRecord = (recordId: string) => {
        const record = growthRecords.find(r => r.id === recordId);
        if (record) {
            setNewRecord({
                title: record.title,
                description: record.description,
                category: record.category
            });
            setRecordToEdit(recordId);
            setShowEditModal(true);
            setShowActionMenu(null);
        }
    };

    const handleUpdateRecord = () => {
        if (!newRecord.title.trim() || !recordToEdit) return;

        setGrowthRecords(prev => prev.map(record =>
            record.id === recordToEdit
                ? {
                    ...record,
                    title: newRecord.title.trim(),
                    description: newRecord.description.trim(),
                    category: newRecord.category
                }
                : record
        ));

        setNewRecord({ title: '', description: '', category: 'first_time' });
        setRecordToEdit(null);
        setShowEditModal(false);
    };

    const handleDeleteRecord = (recordId: string) => {
        setRecordToDelete(recordId);
        setShowDeleteModal(true);
        setShowActionMenu(null);
    };

    const confirmDelete = () => {
        if (recordToDelete) {
            setGrowthRecords(prev => prev.filter(record => record.id !== recordToDelete));
            setRecordToDelete(null);
        }
        setShowDeleteModal(false);
    };

    const resetModal = () => {
        setNewRecord({ title: '', description: '', category: 'first_time' });
        setRecordToEdit(null);
    };

    const getCategoryInfo = (category: string) => {
        return categoryOptions.find(opt => opt.id === category) || categoryOptions[0];
    };

    const formatDate = (date: Date) => {
        return date.toLocaleDateString('ja-JP', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-pink-50 via-purple-50 to-indigo-50 pb-24">
            {/* „Éò„ÉÉ„ÉÄ„Éº */}
            <div className="sticky top-0 z-10 bg-white/95 backdrop-blur-sm border-b border-gray-100 px-4 py-4">
                <div className="flex items-center justify-between">
                    <div>
                        <h1 className="text-xl font-bold text-gray-800">ÊàêÈï∑Ë®òÈå≤</h1>
                        <p className="text-sm text-gray-600 mt-1">
                            {childInfo?.name}„ÅÆÊàêÈï∑„ÅÆË®òÈå≤
                        </p>
                    </div>
                    <button
                        onClick={() => setShowAddModal(true)}
                        className="bg-gradient-to-r from-pink-500 to-purple-600 text-white p-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-200 active:scale-95"
                    >
                        <Plus size={24} />
                    </button>
                </div>
            </div>

            {/* „Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
            <div className="px-4 py-6">
                {growthRecords.length === 0 ? (
                    <div className="text-center py-20">
                        <div className="text-6xl mb-4">üå±</div>
                        <h3 className="text-lg font-semibold text-gray-700 mb-2">
                            „Åæ„Å†Ë®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì
                        </h3>
                        <p className="text-gray-500 mb-6 leading-relaxed">
                            „ÅäÂ≠ê„Åï„Çì„ÅÆÊàêÈï∑„ÅÆÁû¨Èñì„Çí<br />
                            Ë®òÈå≤„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ
                        </p>
                        <button
                            onClick={() => setShowAddModal(true)}
                            className="bg-gradient-to-r from-pink-500 to-purple-600 text-white px-8 py-3 rounded-full text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200 active:scale-95"
                        >
                            ÊúÄÂàù„ÅÆË®òÈå≤„ÇíËøΩÂä†
                        </button>
                    </div>
                ) : (
                    <div className="space-y-4">
                        {growthRecords.map((record) => {
                            const categoryInfo = getCategoryInfo(record.category);
                            return (
                                <div
                                    key={record.id}
                                    className={`${categoryInfo.bgColor} ${categoryInfo.borderColor} border-2 rounded-2xl p-5 shadow-sm hover:shadow-md transition-all duration-200 relative`}
                                >
                                    <div className="flex items-start space-x-3">
                                        <div className={`${categoryInfo.color} p-2 rounded-xl bg-white/70`}>
                                            {categoryInfo.icon}
                                        </div>
                                        <div className="flex-1 min-w-0 pr-12">
                                            <div className="flex items-center justify-between mb-2">
                                                <span className={`${categoryInfo.color} text-sm font-medium`}>
                                                    {categoryInfo.label}
                                                </span>
                                                <span className="text-xs text-gray-500">
                                                    {formatDate(record.date)}
                                                </span>
                                            </div>
                                            <h3 className="text-lg font-bold text-gray-800 mb-2 leading-tight">
                                                {record.title}
                                            </h3>
                                            {record.description && (
                                                <p className="text-gray-700 leading-relaxed">
                                                    {record.description}
                                                </p>
                                            )}
                                        </div>
                                    </div>
                                    {/* ‰∏âÁÇπ„É°„Éã„É•„Éº„Éú„Çø„É≥ */}
                                    <div className="absolute top-4 right-4">
                                        <button
                                            onClick={() => setShowActionMenu(showActionMenu === record.id ? null : record.id)}
                                            className="p-2 rounded-full bg-white/80 hover:bg-white border border-gray-200 text-gray-600 hover:text-gray-800 transition-colors shadow-sm"
                                            aria-label="„Ç¢„ÇØ„Ç∑„Éß„É≥„É°„Éã„É•„Éº"
                                        >
                                            <MoreVertical size={16} />
                                        </button>

                                        {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„É°„Éã„É•„Éº */}
                                        {showActionMenu === record.id && (
                                            <div className="absolute top-12 right-0 bg-white rounded-xl shadow-lg border border-gray-200 py-2 z-20 min-w-32">
                                                <button
                                                    onClick={() => handleEditRecord(record.id)}
                                                    className="w-full px-4 py-3 text-left flex items-center space-x-2 hover:bg-gray-50 transition-colors"
                                                >
                                                    <Edit3 size={16} className="text-blue-600" />
                                                    <span className="text-sm font-medium text-gray-700">Á∑®ÈõÜ</span>
                                                </button>
                                                <button
                                                    onClick={() => handleDeleteRecord(record.id)}
                                                    className="w-full px-4 py-3 text-left flex items-center space-x-2 hover:bg-gray-50 transition-colors"
                                                >
                                                    <Trash2 size={16} className="text-red-600" />
                                                    <span className="text-sm font-medium text-gray-700">ÂâäÈô§</span>
                                                </button>
                                            </div>
                                        )}
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                )}
            </div>

            {/* ËÉåÊôØ„ÇØ„É™„ÉÉ„ÇØ„Åß„É°„Éã„É•„Éº„ÇíÈñâ„Åò„Çã */}
            {showActionMenu && (
                <div
                    className="fixed inset-0 z-10"
                    onClick={() => setShowActionMenu(null)}
                />
            )}

            {/* Ë®òÈå≤ËøΩÂä†„É¢„Éº„ÉÄ„É´ */}
            {showAddModal && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                    <div className="bg-white rounded-3xl mx-4 w-full max-w-md shadow-2xl">
                        <div className="p-6">
                            <h2 className="text-xl font-bold text-gray-800 mb-6">
                                ÊàêÈï∑Ë®òÈå≤„ÇíËøΩÂä†
                            </h2>

                            {/* „Ç´„ÉÜ„Ç¥„É™„ÉºÈÅ∏Êäû */}
                            <div className="mb-6">
                                <label className="block text-sm font-medium text-gray-700 mb-3">
                                    „Ç´„ÉÜ„Ç¥„É™„Éº
                                </label>
                                <div className="grid grid-cols-2 gap-3">
                                    {categoryOptions.map((option) => (
                                        <button
                                            key={option.id}
                                            onClick={() => setNewRecord({ ...newRecord, category: option.id as any })}
                                            className={`p-3 rounded-xl border-2 transition-all duration-200 ${newRecord.category === option.id
                                                    ? `${option.bgColor} ${option.borderColor} ${option.color}`
                                                    : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'
                                                }`}
                                        >
                                            <div className="flex flex-col items-center space-y-1">
                                                {option.icon}
                                                <span className="text-xs font-medium">
                                                    {option.label}
                                                </span>
                                            </div>
                                        </button>
                                    ))}
                                </div>
                            </div>

                            {/* „Çø„Ç§„Éà„É´ */}
                            <div className="mb-4">
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    „Çø„Ç§„Éà„É´ *
                                </label>
                                <input
                                    type="text"
                                    value={newRecord.title}
                                    onChange={(e) => setNewRecord({ ...newRecord, title: e.target.value })}
                                    placeholder="‰æã: „ÅØ„Åò„ÇÅ„Å¶Ê≠©„ÅÑ„Åü"
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-pink-500 focus:border-pink-500 text-base"
                                />
                            </div>

                            {/* Ë©≥Á¥∞Ë™¨Êòé */}
                            <div className="mb-6">
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Ë©≥Á¥∞Ë™¨Êòé
                                </label>
                                <textarea
                                    value={newRecord.description}
                                    onChange={(e) => setNewRecord({ ...newRecord, description: e.target.value })}
                                    placeholder="Ë©≥„Åó„ÅÑÂÜÖÂÆπ„ÇÑÊÑüÊÉ≥„ÇíË®òÈå≤„Åó„Åæ„Åó„Çá„ÅÜ..."
                                    rows={3}
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-pink-500 focus:border-pink-500 text-base resize-none"
                                />
                            </div>

                            {/* „Éú„Çø„É≥ */}
                            <div className="flex space-x-3">
                                <button
                                    onClick={() => {
                                        setShowAddModal(false);
                                        resetModal();
                                    }}
                                    className="flex-1 py-3 px-4 border border-gray-300 text-gray-700 rounded-xl font-medium hover:bg-gray-50 transition-colors duration-200"
                                >
                                    „Ç≠„É£„É≥„Çª„É´
                                </button>
                                <button
                                    onClick={handleAddRecord}
                                    disabled={!newRecord.title.trim()}
                                    className={`flex-1 py-3 px-4 rounded-xl font-medium transition-all duration-200 ${newRecord.title.trim()
                                            ? 'bg-gradient-to-r from-pink-500 to-purple-600 text-white hover:shadow-lg active:scale-95'
                                            : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                        }`}
                                >
                                    ËøΩÂä†
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* Ë®òÈå≤Á∑®ÈõÜ„É¢„Éº„ÉÄ„É´ */}
            {showEditModal && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                    <div className="bg-white rounded-3xl mx-4 w-full max-w-md shadow-2xl">
                        <div className="p-6">
                            <h2 className="text-xl font-bold text-gray-800 mb-6">
                                ÊàêÈï∑Ë®òÈå≤„ÇíÁ∑®ÈõÜ
                            </h2>

                            {/* „Ç´„ÉÜ„Ç¥„É™„ÉºÈÅ∏Êäû */}
                            <div className="mb-6">
                                <label className="block text-sm font-medium text-gray-700 mb-3">
                                    „Ç´„ÉÜ„Ç¥„É™„Éº
                                </label>
                                <div className="grid grid-cols-2 gap-3">
                                    {categoryOptions.map((option) => (
                                        <button
                                            key={option.id}
                                            onClick={() => setNewRecord({ ...newRecord, category: option.id as any })}
                                            className={`p-3 rounded-xl border-2 transition-all duration-200 ${newRecord.category === option.id
                                                    ? `${option.bgColor} ${option.borderColor} ${option.color}`
                                                    : 'bg-gray-50 border-gray-200 text-gray-600 hover:bg-gray-100'
                                                }`}
                                        >
                                            <div className="flex flex-col items-center space-y-1">
                                                {option.icon}
                                                <span className="text-xs font-medium">
                                                    {option.label}
                                                </span>
                                            </div>
                                        </button>
                                    ))}
                                </div>
                            </div>

                            {/* „Çø„Ç§„Éà„É´ */}
                            <div className="mb-4">
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    „Çø„Ç§„Éà„É´ *
                                </label>
                                <input
                                    type="text"
                                    value={newRecord.title}
                                    onChange={(e) => setNewRecord({ ...newRecord, title: e.target.value })}
                                    placeholder="‰æã: „ÅØ„Åò„ÇÅ„Å¶Ê≠©„ÅÑ„Åü"
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base"
                                />
                            </div>

                            {/* Ë©≥Á¥∞Ë™¨Êòé */}
                            <div className="mb-6">
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Ë©≥Á¥∞Ë™¨Êòé
                                </label>
                                <textarea
                                    value={newRecord.description}
                                    onChange={(e) => setNewRecord({ ...newRecord, description: e.target.value })}
                                    placeholder="Ë©≥„Åó„ÅÑÂÜÖÂÆπ„ÇÑÊÑüÊÉ≥„ÇíË®òÈå≤„Åó„Åæ„Åó„Çá„ÅÜ..."
                                    rows={3}
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-base resize-none"
                                />
                            </div>

                            {/* „Éú„Çø„É≥ */}
                            <div className="flex space-x-3">
                                <button
                                    onClick={() => {
                                        setShowEditModal(false);
                                        resetModal();
                                    }}
                                    className="flex-1 py-3 px-4 border border-gray-300 text-gray-700 rounded-xl font-medium hover:bg-gray-50 transition-colors duration-200"
                                >
                                    „Ç≠„É£„É≥„Çª„É´
                                </button>
                                <button
                                    onClick={handleUpdateRecord}
                                    disabled={!newRecord.title.trim()}
                                    className={`flex-1 py-3 px-4 rounded-xl font-medium transition-all duration-200 ${newRecord.title.trim()
                                            ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white hover:shadow-lg active:scale-95'
                                            : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                        }`}
                                >
                                    Êõ¥Êñ∞
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* ÂâäÈô§Á¢∫Ë™ç„É¢„Éº„ÉÄ„É´ */}
            {showDeleteModal && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
                    <div className="bg-white rounded-3xl mx-4 w-full max-w-sm shadow-2xl">
                        <div className="p-6">
                            <div className="text-center mb-6">
                                <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                    <Trash2 size={24} className="text-red-600" />
                                </div>
                                <h2 className="text-xl font-bold text-gray-800 mb-2">
                                    Ë®òÈå≤„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü
                                </h2>
                                <p className="text-gray-600">
                                    „Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åô„Åì„Å®„Åå„Åß„Åç„Åæ„Åõ„Çì
                                </p>
                            </div>

                            <div className="flex space-x-3">
                                <button
                                    onClick={() => setShowDeleteModal(false)}
                                    className="flex-1 py-3 px-4 border border-gray-300 text-gray-700 rounded-xl font-medium hover:bg-gray-50 transition-colors duration-200"
                                >
                                    „Ç≠„É£„É≥„Çª„É´
                                </button>
                                <button
                                    onClick={confirmDelete}
                                    className="flex-1 py-3 px-4 bg-red-600 text-white rounded-xl font-medium hover:bg-red-700 transition-all duration-200 active:scale-95"
                                >
                                    ÂâäÈô§
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default GrowthRecords; 